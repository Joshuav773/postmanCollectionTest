{
	"info": {
		"_postman_id": "0a9d057b-12ff-47f2-b8c6-05cd620d0757",
		"name": "3D Media Scraper Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Beam-Scrape",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"/*\r",
							"    value is injected by jenkins through the CLI\r",
							"    if you want to test locally change the default value \r",
							"    in the environment.\r",
							" */\r",
							"let selectedTests = pm.environment.get('selectedTest').split(',');\r",
							"let sections = pm.request.body.formdata.sectionNumbers;\r",
							"let jsonRes = pm.response.body;\r",
							"\r",
							"var isTestSkipped = (testName) => {\r",
							"    if(selectedTests.includes(testName)){\r",
							"        return false;\r",
							"    }\r",
							"\r",
							"    return true;\r",
							"}\r",
							"\r",
							"// --- START TESTS ---\r",
							"\r",
							"(isTestSkipped(\"Status code is 200\") ? pm.test.skip('Status code is 200') :\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200); \r",
							"    })\r",
							");\r",
							"\r",
							"(isTestSkipped('Scraper started at section expected') ? pm.test.skip('Scraper started at section expected') :\r",
							"    pm.test(\"Scraper started at section expected\", function () {\r",
							"        pm.expect(jsonRes.meta.isSuccessful).to.eq(true);\r",
							"        pm.response.to.have.status(200);\r",
							"\r",
							"        let firstSection = sections[0];\r",
							"        let firstSectionObj = jsonRes.data[0].title;\r",
							"\r",
							"        pm.expect(firstSectionObj).to.include(firstSection, 'first section specified was not the first section scraped');\r",
							"    })\r",
							");\r",
							"\r",
							"(isTestSkipped(\"Scraper finished at section expected\") ? pm.test.skip('Scraper finished at section expected') :\r",
							"    pm.test(\"Scraper finished at section expected\", function () {\r",
							"        pm.expect(jsonRes.meta.isSuccessful).to.eq(true);\r",
							"        pm.response.to.have.status(200);\r",
							"\r",
							"       let lastSection = sections[sections.length - 1];\r",
							"       let lastSectionObj = jsonRes.data[jsonRes.data.length - 1].title;\r",
							"\r",
							"       pm.expect(lastSectionObj).to.eq(lastSection, 'last section specified was not the last section scraped');\r",
							"    })\r",
							");\r",
							"\r",
							"(isTestSkipped(\"Scraped sections specified\") ? pm.test.skip('Scraped sections specified') :\r",
							"    pm.test(\"Scraped sections specified\", () => {\r",
							"        pm.expect(jsonRes.meta.isSuccessful).to.eq(true);\r",
							"        pm.response.to.have.status(200);\r",
							"\r",
							"       var count = jsonRes.data.length;\r",
							"       pm.expect(sections).to.have.lengthOf(count, 'the scraped sections did not match the amount requested');\r",
							"    })\r",
							");\r",
							"\r",
							"(isTestSkipped('Verify each section resource type is template') ? pm.test.skip('Verify each section resource type is template') :\r",
							"    pm.test(\"Verify each section resource type is template\", function () {\r",
							"        pm.expect(jsonRes.meta.isSuccessful).to.eq(true);\r",
							"        pm.response.to.have.status(200);\r",
							"\r",
							"        let resData = jsonRes.data;\r",
							"\r",
							"        resData.foreach(template => {\r",
							"            var resourceType = template.resourceType;\r",
							"            pm.expect(resourceType.toLower()).to.eq('template', 'one or more resource types is wrong type');\r",
							"        });      \r",
							"    })\r",
							");\r",
							"\r",
							"(isTestSkipped(\"Verify templates assetClassId matched the specified asset class\") ? pm.test.skip('Verify templates assetClassId matched the specified asset class') :\r",
							"    pm.test(\"Verify templates assetClassId matched the specified asset class\", function () {\r",
							"        pm.expect(jsonRes.meta.isSuccessful).to.eq(true);\r",
							"        pm.response.to.have.status(200);\r",
							"\r",
							"        let specifiedAssetClass = pm.request.body.formdata.assetClassId;\r",
							"\r",
							"        jsonRes.data.foreach(template => {\r",
							"            pm.expect(specifiedAssetClass).to.eq(template.asset_class_id, `template with id ${template.id} has the wrong asset class`);\r",
							"        });\r",
							"    })\r",
							");\r",
							"\r",
							"(isTestSkipped(\"verify error object is null if success response status code\") ? pm.test.skip('verify error object is null if success response status code') :\r",
							"    pm.test(\"verify error object is null if success response status code\", () => {\r",
							"        pm.response.to.have.status(200);\r",
							"        pm.expect(jsonRes.error).to.be.null();\r",
							"    })\r",
							");\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "/C:/Users/Joshua Vargas/OneDrive/Desktop/1F-15E-2-05JG-00-1_Aircraft_General_Knowledge.PDF"
						},
						{
							"key": "sectionNumbers",
							"value": "05-00-01",
							"type": "text"
						},
						{
							"key": "sectionNumbers",
							"value": "05-00-02",
							"type": "text"
						},
						{
							"key": "assetClassId",
							"value": "2",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUri}}/beam/translator",
					"host": [
						"{{baseUri}}"
					],
					"path": [
						"beam",
						"translator"
					]
				}
			},
			"response": []
		}
	]
}